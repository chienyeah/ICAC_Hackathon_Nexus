/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PrizePoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createPool"
      | "poolCount"
      | "pools"
      | "release"
      | "roles"
      | "verifyResults"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PrizePoolCreated"
      | "PrizeReleased"
      | "ResultsVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createPool",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poolCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [BigNumberish, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "roles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyResults",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyResults",
    data: BytesLike
  ): Result;
}

export namespace PrizePoolCreatedEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    token: AddressLike,
    total: BigNumberish
  ];
  export type OutputTuple = [poolId: bigint, token: string, total: bigint];
  export interface OutputObject {
    poolId: bigint;
    token: string;
    total: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeReleasedEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [poolId: bigint, to: string, amount: bigint];
  export interface OutputObject {
    poolId: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultsVerifiedEvent {
  export type InputTuple = [poolId: BigNumberish];
  export type OutputTuple = [poolId: bigint];
  export interface OutputObject {
    poolId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrizePool extends BaseContract {
  connect(runner?: ContractRunner | null): PrizePool;
  waitForDeployment(): Promise<this>;

  interface: PrizePoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPool: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  poolCount: TypedContractMethod<[], [bigint], "view">;

  pools: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, string] & {
        token: string;
        total: bigint;
        verified: boolean;
        creator: string;
      }
    ],
    "view"
  >;

  release: TypedContractMethod<
    [poolId: BigNumberish, winners: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  roles: TypedContractMethod<[], [string], "view">;

  verifyResults: TypedContractMethod<
    [poolId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poolCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, string] & {
        token: string;
        total: bigint;
        verified: boolean;
        creator: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<
    [poolId: BigNumberish, winners: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyResults"
  ): TypedContractMethod<[poolId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "PrizePoolCreated"
  ): TypedContractEvent<
    PrizePoolCreatedEvent.InputTuple,
    PrizePoolCreatedEvent.OutputTuple,
    PrizePoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PrizeReleased"
  ): TypedContractEvent<
    PrizeReleasedEvent.InputTuple,
    PrizeReleasedEvent.OutputTuple,
    PrizeReleasedEvent.OutputObject
  >;
  getEvent(
    key: "ResultsVerified"
  ): TypedContractEvent<
    ResultsVerifiedEvent.InputTuple,
    ResultsVerifiedEvent.OutputTuple,
    ResultsVerifiedEvent.OutputObject
  >;

  filters: {
    "PrizePoolCreated(uint256,address,uint256)": TypedContractEvent<
      PrizePoolCreatedEvent.InputTuple,
      PrizePoolCreatedEvent.OutputTuple,
      PrizePoolCreatedEvent.OutputObject
    >;
    PrizePoolCreated: TypedContractEvent<
      PrizePoolCreatedEvent.InputTuple,
      PrizePoolCreatedEvent.OutputTuple,
      PrizePoolCreatedEvent.OutputObject
    >;

    "PrizeReleased(uint256,address,uint256)": TypedContractEvent<
      PrizeReleasedEvent.InputTuple,
      PrizeReleasedEvent.OutputTuple,
      PrizeReleasedEvent.OutputObject
    >;
    PrizeReleased: TypedContractEvent<
      PrizeReleasedEvent.InputTuple,
      PrizeReleasedEvent.OutputTuple,
      PrizeReleasedEvent.OutputObject
    >;

    "ResultsVerified(uint256)": TypedContractEvent<
      ResultsVerifiedEvent.InputTuple,
      ResultsVerifiedEvent.OutputTuple,
      ResultsVerifiedEvent.OutputObject
    >;
    ResultsVerified: TypedContractEvent<
      ResultsVerifiedEvent.InputTuple,
      ResultsVerifiedEvent.OutputTuple,
      ResultsVerifiedEvent.OutputObject
    >;
  };
}
