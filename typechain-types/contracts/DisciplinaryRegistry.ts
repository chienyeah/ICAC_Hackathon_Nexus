/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DisciplinaryRegistryInterface extends Interface {
  getFunction(
    nameOrSignature: "count" | "logSanction" | "roles" | "sanctions"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SanctionLogged"): EventFragment;

  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "logSanction",
    values: [AddressLike, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "roles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sanctions",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "logSanction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sanctions", data: BytesLike): Result;
}

export namespace SanctionLoggedEvent {
  export type InputTuple = [
    id: BigNumberish,
    subject: AddressLike,
    kind: string,
    reason: string,
    startDate: BigNumberish,
    endDate: BigNumberish,
    ts: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    subject: string,
    kind: string,
    reason: string,
    startDate: bigint,
    endDate: bigint,
    ts: bigint
  ];
  export interface OutputObject {
    id: bigint;
    subject: string;
    kind: string;
    reason: string;
    startDate: bigint;
    endDate: bigint;
    ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DisciplinaryRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DisciplinaryRegistry;
  waitForDeployment(): Promise<this>;

  interface: DisciplinaryRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  count: TypedContractMethod<[], [bigint], "view">;

  logSanction: TypedContractMethod<
    [
      subject: AddressLike,
      kind: string,
      reason: string,
      startDate: BigNumberish,
      endDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  roles: TypedContractMethod<[], [string], "view">;

  sanctions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint] & {
        subject: string;
        kind: string;
        reason: string;
        startDate: bigint;
        endDate: bigint;
        ts: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "logSanction"
  ): TypedContractMethod<
    [
      subject: AddressLike,
      kind: string,
      reason: string,
      startDate: BigNumberish,
      endDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sanctions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint] & {
        subject: string;
        kind: string;
        reason: string;
        startDate: bigint;
        endDate: bigint;
        ts: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "SanctionLogged"
  ): TypedContractEvent<
    SanctionLoggedEvent.InputTuple,
    SanctionLoggedEvent.OutputTuple,
    SanctionLoggedEvent.OutputObject
  >;

  filters: {
    "SanctionLogged(uint256,address,string,string,uint64,uint64,uint64)": TypedContractEvent<
      SanctionLoggedEvent.InputTuple,
      SanctionLoggedEvent.OutputTuple,
      SanctionLoggedEvent.OutputObject
    >;
    SanctionLogged: TypedContractEvent<
      SanctionLoggedEvent.InputTuple,
      SanctionLoggedEvent.OutputTuple,
      SanctionLoggedEvent.OutputObject
    >;
  };
}
