/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TransferRegistryInterface extends Interface {
  getFunction(
    nameOrSignature: "recordTransfer" | "roles" | "transferCount" | "transfers"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TransferRecorded"): EventFragment;

  encodeFunctionData(
    functionFragment: "recordTransfer",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "roles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfers",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "recordTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfers", data: BytesLike): Result;
}

export namespace TransferRecordedEvent {
  export type InputTuple = [
    id: BigNumberish,
    playerId: BigNumberish,
    fromClub: AddressLike,
    toClub: AddressLike,
    feeWei: BigNumberish,
    agent: AddressLike,
    agentFeeWei: BigNumberish,
    docSha256: BytesLike,
    ipfsCid: string,
    ts: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    playerId: bigint,
    fromClub: string,
    toClub: string,
    feeWei: bigint,
    agent: string,
    agentFeeWei: bigint,
    docSha256: string,
    ipfsCid: string,
    ts: bigint
  ];
  export interface OutputObject {
    id: bigint;
    playerId: bigint;
    fromClub: string;
    toClub: string;
    feeWei: bigint;
    agent: string;
    agentFeeWei: bigint;
    docSha256: string;
    ipfsCid: string;
    ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TransferRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): TransferRegistry;
  waitForDeployment(): Promise<this>;

  interface: TransferRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  recordTransfer: TypedContractMethod<
    [
      playerId: BigNumberish,
      toClub: AddressLike,
      feeWei: BigNumberish,
      agent: AddressLike,
      agentFeeWei: BigNumberish,
      docSha256: BytesLike,
      ipfsCid: string
    ],
    [bigint],
    "nonpayable"
  >;

  roles: TypedContractMethod<[], [string], "view">;

  transferCount: TypedContractMethod<[], [bigint], "view">;

  transfers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        bigint,
        string,
        string,
        bigint
      ] & {
        playerId: bigint;
        fromClub: string;
        toClub: string;
        feeWei: bigint;
        agent: string;
        agentFeeWei: bigint;
        docSha256: string;
        ipfsCid: string;
        ts: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "recordTransfer"
  ): TypedContractMethod<
    [
      playerId: BigNumberish,
      toClub: AddressLike,
      feeWei: BigNumberish,
      agent: AddressLike,
      agentFeeWei: BigNumberish,
      docSha256: BytesLike,
      ipfsCid: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        bigint,
        string,
        string,
        bigint
      ] & {
        playerId: bigint;
        fromClub: string;
        toClub: string;
        feeWei: bigint;
        agent: string;
        agentFeeWei: bigint;
        docSha256: string;
        ipfsCid: string;
        ts: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "TransferRecorded"
  ): TypedContractEvent<
    TransferRecordedEvent.InputTuple,
    TransferRecordedEvent.OutputTuple,
    TransferRecordedEvent.OutputObject
  >;

  filters: {
    "TransferRecorded(uint256,uint256,address,address,uint256,address,uint256,bytes32,string,uint64)": TypedContractEvent<
      TransferRecordedEvent.InputTuple,
      TransferRecordedEvent.OutputTuple,
      TransferRecordedEvent.OutputObject
    >;
    TransferRecorded: TypedContractEvent<
      TransferRecordedEvent.InputTuple,
      TransferRecordedEvent.OutputTuple,
      TransferRecordedEvent.OutputObject
    >;
  };
}
