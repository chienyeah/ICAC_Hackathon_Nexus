/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SponsorshipRegistryInterface extends Interface {
  getFunction(
    nameOrSignature: "count" | "deals" | "registerDeal" | "roles"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SponsorshipRegistered"): EventFragment;

  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(functionFragment: "deals", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "registerDeal",
    values: [AddressLike, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "roles", values?: undefined): string;

  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDeal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
}

export namespace SponsorshipRegisteredEvent {
  export type InputTuple = [
    id: BigNumberish,
    sponsor: AddressLike,
    club: AddressLike,
    amountWei: BigNumberish,
    docSha256: BytesLike,
    ipfsCid: string,
    ts: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    sponsor: string,
    club: string,
    amountWei: bigint,
    docSha256: string,
    ipfsCid: string,
    ts: bigint
  ];
  export interface OutputObject {
    id: bigint;
    sponsor: string;
    club: string;
    amountWei: bigint;
    docSha256: string;
    ipfsCid: string;
    ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SponsorshipRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): SponsorshipRegistry;
  waitForDeployment(): Promise<this>;

  interface: SponsorshipRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  count: TypedContractMethod<[], [bigint], "view">;

  deals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, string, bigint] & {
        sponsor: string;
        club: string;
        amountWei: bigint;
        docSha256: string;
        ipfsCid: string;
        ts: bigint;
      }
    ],
    "view"
  >;

  registerDeal: TypedContractMethod<
    [
      club: AddressLike,
      amountWei: BigNumberish,
      docSha256: BytesLike,
      ipfsCid: string
    ],
    [bigint],
    "nonpayable"
  >;

  roles: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, string, bigint] & {
        sponsor: string;
        club: string;
        amountWei: bigint;
        docSha256: string;
        ipfsCid: string;
        ts: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerDeal"
  ): TypedContractMethod<
    [
      club: AddressLike,
      amountWei: BigNumberish,
      docSha256: BytesLike,
      ipfsCid: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "SponsorshipRegistered"
  ): TypedContractEvent<
    SponsorshipRegisteredEvent.InputTuple,
    SponsorshipRegisteredEvent.OutputTuple,
    SponsorshipRegisteredEvent.OutputObject
  >;

  filters: {
    "SponsorshipRegistered(uint256,address,address,uint256,bytes32,string,uint64)": TypedContractEvent<
      SponsorshipRegisteredEvent.InputTuple,
      SponsorshipRegisteredEvent.OutputTuple,
      SponsorshipRegisteredEvent.OutputObject
    >;
    SponsorshipRegistered: TypedContractEvent<
      SponsorshipRegisteredEvent.InputTuple,
      SponsorshipRegisteredEvent.OutputTuple,
      SponsorshipRegisteredEvent.OutputObject
    >;
  };
}
